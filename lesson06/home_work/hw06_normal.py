# Задание-1:
# Реализуйте описаную ниже задачу, используя парадигмы ООП:
# В школе есть Классы(5А, 7Б и т.д.), в которых учатся Ученики.
# У каждого ученика есть два Родителя(мама и папа).
# Также в школе преподают Учителя. Один учитель может преподавать 
# в неограниченном кол-ве классов свой определенный предмет. 
# Т.е. Учитель Иванов может преподавать математику у 5А и 6Б,
# но больше математику не может преподавать никто другой.

# school_dict = {
#     'classes': ['8a', '9б'],
#     'courses':  ['Алгебра', 'Физика', 'Геометрия', 'История'],
#     'taechers': ['Борисов А.В', 'Сидоренко С.С', 'Филатов П.Е.', 'Бельчинский К.А.'],
#     'students':  ['Петров А.Г', 'Сидоров С.С', 'Иванов П.Е.', 'Соколов К.А.', 'Журавлев К.В.']
#     ''
# }
#
# class School:
#     def __init__(self, school_dict):
#         self.classes,self.courses,self.teachers, self.students = school_dict
#     def get_classes(self):
#         print("классы школы ", self.classes)
#
# class Student(School):
#     def __init__(self):
#         School.__init__(self, school_dict)
#         self.set_students()







# Выбранная и заполненная данными структура должна решать следующие задачи:
# 1. Получить полный список всех классов школы
# 2. Получить список всех учеников в указанном классе
#  (каждый ученик отображается в формате "Фамилия И.О.")
# 3. Получить список всех предметов указанного ученика 
#  (Ученик --> Класс --> Учителя --> Предметы)
# 4. Узнать ФИО родителей указанного ученика
# 5. Получить список всех Учителей, преподающих в указанном классе



